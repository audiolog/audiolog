Here is an outline of the actions that Audiolog takes and where that
functionality can be found in the source files.

Each of the actions is fairly independent, so you should be able to dive into
a section and understand it in isolation pretty quickly.


#The Steps
#-------------------------------------------
0. Traverse It
    - Recurse through the directory tree using a Depth First Search
    - Execute the appropriate actions based on the file content in each directory
1. Extract It
    - Make a directory with the archive filename, extract into directory
    - Recursively extract all other archives within
2. Handle It
    - Split (if necessary)
    - Convert or delete based on format (if necessary)
    - Delete random files
    - If there are images, try to identify cover and rename to cover.jpg
3. Tag It
    - Try to get a PUID for tracks
    - Look up other metainformation from current track ID3s
    - Create a data structure that represents the metainformation for the current album
    - Get additional information from filenames and the directory structure and augment the data structure
    - Commit the metainformation to the files
4. Place It
    - See if it's in the collection, if it is choose the better version
    - Apply proper folder hierarchy
    - (If applicable) Move into the collection


#How Those Steps Are Spread Across Our Files
#-------------------------------------------
Common Files
Constants, settings and paths                                   configuration.py
Functions used across multiple files                            functions.py
Short function imported using from x import * for convenience   utils.py
Sending messages to log                                         logger.py
Pausing and stopping                                            flowcontrol.py
Memoization of MusicDNS and MusicBrainz for speed               cache.py

Procedural Steps and Files
Program entry point, reads command-line args, starts program    audiolog.py
Traverse through folders calling need functions                 traverse.py
(If necessary) Extract archives                                 extract.py
(If necessary) Convert (or delete) unwanted music formats       convert.py
(If necessary) Split album based on cue                         split.py
(If necessary) Remove unwanted extra files                      clean.py
    
Audio Handling
Wrapper around the ReleaseManager functionality                 audio.py
ReleaseManager uses Finders to gather, check & write metadata   Manager.py
Base class for Finders              '                           AbstractFinder.py
A class tailored to gathering data for X field                  XFinder.py
Functions for get music metadata from Musicbrainz               musicbrainz.py
Generating audio fingerprints and querying MusicDNS             fingerprint.py
Writing and reading ID3 and Vorbis tags                         tagging.py

GUI
Graphical interface main window                                 MainWindow.py
Graphical configuration dialog                                  ConfigurationDialog.py
Log designed to maximize readability                            LogFrame.py 


#Stylistic Conventions
#-------------------------------------------
Capitalization and indentation:
    - 4-space indentation
    - camelCase for variables and function names
    - StudlyCaps for class names
Docstrings:
    - Every function, class and file should have a docstring. (Exception: __init__)
    - Every docstring should begin with a one-line description that summarizes
      the functionality or purpose of that item.
    - Docstrings should use correct grammar and punctuation.
    - The first line should use the imperative. ("Return sum" vs. "Returns sum")
    - After a blank line, more information can be included such as:
      the parameters, the return values, the side effects and the methods used.
    - Docstrings should always be followed by a blank line.


#Naming Conventions
#-------------------------------------------
On files:
    - paths should be named filePath(s), directoryPath(s) or itemPath(s) when type is ambiguous
    - filenames, which do not contain "/", should be named fileName(s), directoryNames(s) or itemNames(s)
    - entry is acceptable for elements in listdir results


#The Finished Product
#-------------------------------------------
What things should be true of the files and folders once we are done?
    
    - Exactly one album or disc's worth of content in each leaf directory
        - Multiple discs should be moved into their own folders
        - No tracks should be missing; if so the folder should be rejected
        - If audio files from different albums are present in the same folder, 
          they should moved into separate folders or be rejected
    
    - All albums should be in one (and only one) of two formats: OGG or MP3
        - Lossless formats (FLAC, APE, and WAV) should be converted to OGG -q 9
        - Lossy formats (MPC) should be converted to OGG -q 6
        - WMA should be deleted
        - If somehow there are two different formats (OGG & MP3) reject folder
        
    - The ID3 tags should be present, accurate and to standard
        - Certain tags should be always be present:
            - Artist
            - Album
            - Year
            - Genre
            - Track Title
            - Track Number
            - Total Number of Tracks
        - Some tags should never be present:
            - Copyright
            - URL
            - Encoder           
        - Some tags should be the same for all files in an album:
            - Artist
            - Album
            - Year
            - Genre
            - Total Number of Tracks
            
    - The file and folder names should be to standard:
        [Genre]
            [Artist]
                [Year] - [Album]
                    [Number] - [Title]
                    ...
                    [Number] - [Title]
                [Year] - [Album]
                ...
                   
    - Check for duplicates
        - If we are moving     
                
    - Final result should be moved to Sorted folder or into the Collection
