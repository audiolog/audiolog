Here is an outline of the actions that Audiolog takes and where that
functionality can be found in the source files.

Each of the actions is fairly independent, so you should be able to dive into
a section and understand it in isolation pretty quickly.


#The Steps
#-------------------------------------------
0. Traverse It
    - Recurse through the directory tree using a Depth First Search
    - Execute the appropriate actions based on the file content in each directory
1. Extract It
	- Make a directory with the archive filename, extract into directory
	- Recursively extract all other archives within
2. Handle It
	- Split (if necessary)
	- Convert or delete based on format (if necessary)
	- Delete random files
	- If there are images, try to identify cover and rename to cover.jpg
3. Tag It
	- Try to get a PUID for tracks
	- Look up other metainformation from current track ID3s
	- Create a data structure that represents the metainformation for the current album
	- Get additional information from filenames and the directory structure and augment the data structure
	- Commit the metainformation to the files
4. Place It
	- See if it's in the collection, if it is choose the better version
	- Apply proper folder hierarchy
	- (If applicable) Move into the collection


#How Those Steps Are Spread Across Our Files
#-------------------------------------------
Common Files
Constants, settings and paths                                   configuration.py
Functions used across multiple files                            functions.py
Short function imported using from x import * for convenience   utils.py
Sending messages to log                                         logger.py
Pausing and stopping                                            flowcontrol.py
Memoization of MusicDNS and MusicBrainz for speed               cache.py

Procedural Steps and Files
Program entry point, reads command-line args, starts program    audiolog.py
Traverse through folders calling need functions                 traverse.py
    (If necessary) Extract archives                             extract.py
    (If necessary) Convert (or delete) unwanted music formats   convert.py
    (If necessary) Split album based on cue                     split.py
    (If necessary) Remove unwanted extra files                  clean.py
    
Audio Handling
Wrapper around the ReleaseManager functionality                 audio.py
ReleaseManager uses Finders to gather, check & write metadata   Manager.py
Base class for Finders              '                           AbstractFinder.py
A class tailored to gathering data for X field                  XFinder.py
Functions for get music metadata from Musicbrainz               musicbrainz.py
Generating audio fingerprints and querying MusicDNS             fingerprint.py
Writing and reading ID3 and Vorbis tags                         tagging.py

GUI
Graphical interface main window                                 MainWindow.py
Graphical configuration dialog                                  ConfigurationDialog.py
Log designed to maximize readability                            LogFrame.py 
